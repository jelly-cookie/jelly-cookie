name: Fetch News Data

on:
  schedule:
    - cron: '*/30 * * * *'  # Run every 30 minutes
  workflow_dispatch:  # Allow manual trigger

jobs:
  fetch-news:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Fetch News Data
        id: fetch-news
        run: |
          mkdir -p public
          
          # 기존 데이터 백업
          if [ -f public/news-data.json ]; then
            cp public/news-data.json public/news-data.json.bak
          else
            echo '{"feed": []}' > public/news-data.json.bak
          fi
          
          # API 키가 없을 경우 기존 데이터 유지
          if [[ -z "${{ secrets.ALPHA_VANTAGE_API_KEY }}" ]]; then
            echo "API key is missing! Keeping existing data."
          else
            # API 요청을 통해 뉴스 데이터 가져오기
            response=$(curl -s -X GET "https://www.alphavantage.co/query?function=NEWS_SENTIMENT&topics=economy_fiscal&apikey=${{ secrets.ALPHA_VANTAGE_API_KEY }}")
            
            # JSON에서 "feed" 필드 확인
            if echo "$response" | jq -e '.feed' > /dev/null 2>&1; then
              echo "$response" > public/news-data.json
              echo "✅ Successfully fetched and updated news data at $(date)"
            else
              echo "⚠️ API response does not contain 'feed'. Keeping existing data."
            fi
          fi
          
          # news-data.json이 없으면 기본 JSON 생성
          [ -f public/news-data.json ] || echo '{"feed": []}' > public/news-data.json

          # 데이터 변경 여부 확인
          if cmp -s public/news-data.json public/news-data.json.bak; then
            echo "no_changes=true" >> $GITHUB_OUTPUT
            echo "📝 No changes detected in news data"
          else
            echo "no_changes=false" >> $GITHUB_OUTPUT
            echo "📝 Changes detected in news data"
          fi

      - name: Commit and Push if Changed
        if: steps.fetch-news.outputs.no_changes != 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add public/news-data.json
          git commit -m "Update news data: $(date)"
          git push
